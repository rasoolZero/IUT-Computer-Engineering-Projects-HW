/*******************************************************
This program was created by the
CodeWizardAVR V3.12 Advanced
Automatic Program Generator
© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
http://www.hpinfotech.com

Project : Q3
Version : 
Date    : 12/21/2021
Author  : 
Company : 
Comments: 


Chip type               : ATmega32
Program type            : Application
AVR Core Clock frequency: 8.000000 MHz
Memory model            : Small
External RAM size       : 0
Data Stack size         : 512
*******************************************************/

#include <mega32.h>
#include <alcd.h>
#define F_CPU 8000000
#include <delay.h>
#include <stdio.h>
#include <stdbool.h>

// Declare your global variables here
unsigned char second=0;
unsigned char minute=0;
unsigned char hour=0;
unsigned char alarmSecond=0;
unsigned char alarmMinute=0;
unsigned char alarmHour=0;
unsigned char day=1;
unsigned char month=1;
unsigned int year=2021;
char inputCounter;
bool alarmSetting=false;
bool alarming=false;

void updateTime(){
    second++;
    if(second==60){
        minute++;
        second=0;    
    }
    if(minute==60){
        hour++;
        minute=0;
    }
    if(hour==24){
        day++;
        hour=0;
    }
    if(day==32 && month <=6){
        day=1;
        month++;
    } else if (day==31 && month >6){
        day=1;
        month++;
    }
    if(month==13){
        month=1;
        year++;
    }
}
void displayTime(){
    if(alarmSetting)
        return;
    static char buff[17];
    sprintf(buff,"%u/%02u/%02u\n%02u:%02u:%02u",year,month,day,hour,minute,second);
    lcd_clear();
    lcd_gotoxy(0,0);
    lcd_puts(buff);
}
void updateAlarm(){
    if(alarming)
        PORTC = (~PORTC) & (0x01);
    else
        PORTC = 0x00;
}
void showAlarmSetting(){
    static char buff[17];
    sprintf(buff,"%02u:%02u:%02u",alarmHour,alarmMinute,alarmSecond);
    lcd_clear();
    lcd_gotoxy(0,0);
    lcd_puts(buff);
} 
void checkAlarm(){
    if(hour==alarmHour && minute==alarmMinute && second==alarmSecond)
        alarming=true;
}                 
// Timer1 overflow interrupt service routine
interrupt [TIM1_OVF] void timer1_ovf_isr(void)
{
// Reinitialize Timer1 value
TCNT1H=0x85EE >> 8;
TCNT1L=0x85EE & 0xff;
// Place your code here
updateTime();
displayTime();
updateAlarm();
checkAlarm();
}
#define KEYPAD_PORT PORTD
#define KEYPAD_DDR   DDRD
#define KEYPAD_PIN   PIND
char GetKeyPressed()
{
    char r,c;

   KEYPAD_PORT|= 0X0F;

   for(c=0;c<3;c++)
   {
      KEYPAD_DDR&=~(0X7F);

      KEYPAD_DDR|=(0X40>>c);
      for(r=0;r<4;r++)
      {
         if(!(KEYPAD_PIN & (0X08>>r)))
         {
            return (r*3+c);
         }
      }
   }

   return 0XFF;//Indicate No key pressed
}

void main(void)
{
char key;
// Declare your local variables here

// Input/Output Ports initialization
// Port A initialization
// Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In 
DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
// State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T 
PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);

// Port B initialization
// Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In 
DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
// State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T 
PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);

// Port C initialization
// Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=Out 
DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (1<<DDC0);
// State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T 
PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);

// Port D initialization
// Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In 
DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
// State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T 
PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);

// Timer/Counter 0 initialization
// Clock source: System Clock
// Clock value: Timer 0 Stopped
// Mode: Normal top=0xFF
// OC0 output: Disconnected
TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
TCNT0=0x00;
OCR0=0x00;

// Timer/Counter 1 initialization
// Clock source: System Clock
// Clock value: 31.250 kHz
// Mode: Normal top=0xFFFF
// OC1A output: Disconnected
// OC1B output: Disconnected
// Noise Canceler: Off
// Input Capture on Falling Edge
// Timer Period: 1 s
// Timer1 Overflow Interrupt: On
// Input Capture Interrupt: Off
// Compare A Match Interrupt: Off
// Compare B Match Interrupt: Off
TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (1<<CS12) | (0<<CS11) | (0<<CS10);
TCNT1H=0x85;
TCNT1L=0xEE;
ICR1H=0x00;
ICR1L=0x00;
OCR1AH=0x00;
OCR1AL=0x00;
OCR1BH=0x00;
OCR1BL=0x00;

// Timer/Counter 2 initialization
// Clock source: System Clock
// Clock value: Timer2 Stopped
// Mode: Normal top=0xFF
// OC2 output: Disconnected
ASSR=0<<AS2;
TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
TCNT2=0x00;
OCR2=0x00;

// Timer(s)/Counter(s) Interrupt(s) initialization
TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (1<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);

// External Interrupt(s) initialization
// INT0: Off
// INT1: Off
// INT2: Off
MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
MCUCSR=(0<<ISC2);

// USART initialization
// USART disabled
UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);

// Analog Comparator initialization
// Analog Comparator: Off
// The Analog Comparator's positive input is
// connected to the AIN0 pin
// The Analog Comparator's negative input is
// connected to the AIN1 pin
ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
SFIOR=(0<<ACME);

// ADC initialization
// ADC disabled
ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);

// SPI initialization
// SPI disabled
SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);

// TWI initialization
// TWI disabled
TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);

// Alphanumeric LCD initialization
// Connections are specified in the
// Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
// RS - PORTA Bit 0
// RD - PORTA Bit 1
// EN - PORTA Bit 2
// D4 - PORTA Bit 4
// D5 - PORTA Bit 5
// D6 - PORTA Bit 6
// D7 - PORTA Bit 7
// Characters/line: 8
lcd_init(16);
// Global enable interrupts
    #asm("sei")
    while (1){
        if(alarmSetting)
            showAlarmSetting();
        do{
             key = GetKeyPressed();
            delay_ms(50);
        } while(key!=0xFF);
        do{
             key = GetKeyPressed();
            delay_ms(50);
        } while(key==0xFF);
        delay_ms(50);
        if(key==0XFF)
            continue;
        if(key==11)
            alarming=false;
        if(key==9)
            if(!alarmSetting){  
                alarmSetting=true;
                inputCounter=0;
            }
            else  
                alarmSetting=false;
        if(!alarmSetting)
            continue;
        if(key==10)
            key=0;
        else
            key++;
        if(key>=10)
            continue;
        if(inputCounter==0){ 
            if(key>2)
                continue;
            alarmHour=key*10;
        }
        if(inputCounter==1){
            if(alarmHour==20 && key>3)
                continue;            
            alarmHour+=key;
        }
        if(inputCounter==2){
            if(key>5)
                continue;    
            alarmMinute=key*10;
        }
        if(inputCounter==3)              
            alarmMinute+=key;
        
        if(inputCounter==4){
            alarmSecond=key*10;
        }
        if(inputCounter==5){             
            alarmSecond+=key;
            alarmSetting=false;
        } 
        inputCounter++;
    }
}
