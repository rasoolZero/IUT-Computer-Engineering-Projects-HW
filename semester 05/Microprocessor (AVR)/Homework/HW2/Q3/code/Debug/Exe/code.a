;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project : Q3
;Version :
;Date    : 12/21/2021
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega32
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 512
;*******************************************************/
;
;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <alcd.h>
;#define F_CPU 8000000
;#include <delay.h>
;#include <stdio.h>
;#include <stdbool.h>
;
;// Declare your global variables here
;unsigned char second=0;
;unsigned char minute=0;
;unsigned char hour=0;
;unsigned char alarmSecond=0;
;unsigned char alarmMinute=0;
;unsigned char alarmHour=0;
;unsigned char day=1;
;unsigned char month=1;
;unsigned int year=2021;
;char inputCounter;
;bool alarmSetting=false;
;bool alarming=false;
;
;void updateTime(){
; 0000 002D void updateTime(){

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 002E     second++;
;PCODE: $0000000F VOL: 0
; 0000 002F     if(second==60){
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0030         minute++;
;PCODE: $00000013 VOL: 0
; 0000 0031         second=0;
;PCODE: $00000014 VOL: 0
; 0000 0032     }
; 0000 0033     if(minute==60){
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 0034         hour++;
;PCODE: $00000019 VOL: 0
; 0000 0035         minute=0;
;PCODE: $0000001A VOL: 0
; 0000 0036     }
; 0000 0037     if(hour==24){
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0038         day++;
;PCODE: $0000001F VOL: 0
; 0000 0039         hour=0;
;PCODE: $00000020 VOL: 0
; 0000 003A     }
; 0000 003B     if(day==32 && month <=6){
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 003C         day=1;
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 003D         month++;
;PCODE: $0000002E VOL: 0
; 0000 003E     } else if (day==31 && month >6){
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 003F         day=1;
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0040         month++;
;PCODE: $0000003D VOL: 0
; 0000 0041     }
; 0000 0042     if(month==13){
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0043         month=1;
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 0044         year++;
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 0045     }
; 0000 0046 }
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;void displayTime(){
; 0000 0047 void displayTime(){
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0048     if(alarmSetting)
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 0049         return;
;PCODE: $00000050 VOL: 0
; 0000 004A     static char buff[17];
;PCODE: $00000051 VOL: 0
; 0000 004B     sprintf(buff,"%u/%02u/%02u\n%02u:%02u:%02u",year,month,day,hour,minute,second);
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 004C     lcd_clear();
;PCODE: $0000006D VOL: 0
; 0000 004D     lcd_gotoxy(0,0);
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 004E     lcd_puts(buff);
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 004F }
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;void updateAlarm(){
; 0000 0050 void updateAlarm(){
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 0051     if(alarming)
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 0052         PORTC = (~PORTC) & (0x01);
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 0053     else
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 0054         PORTC = 0x00;
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 0055 }
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;void showAlarmSetting(){
; 0000 0056 void showAlarmSetting(){
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 0057     static char buff[17];
; 0000 0058     sprintf(buff,"%02u:%02u:%02u",alarmHour,alarmMinute,alarmSecond);
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 0059     lcd_clear();
;PCODE: $0000009A VOL: 0
; 0000 005A     lcd_gotoxy(0,0);
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 005B     lcd_puts(buff);
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 005C }
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;void checkAlarm(){
; 0000 005D void checkAlarm(){
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 005E     if(hour==alarmHour && minute==alarmMinute && second==alarmSecond)
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 005F         alarming=true;
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 0060 }
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;// Timer1 overflow interrupt service routine
;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
; 0000 0063 {
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 0064 // Reinitialize Timer1 value
; 0000 0065 TCNT1H=0x85EE >> 8;
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 0066 TCNT1L=0x85EE & 0xff;
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 0067 // Place your code here
; 0000 0068 updateTime();
;PCODE: $000000BD VOL: 0
; 0000 0069 displayTime();
;PCODE: $000000BE VOL: 0
; 0000 006A updateAlarm();
;PCODE: $000000BF VOL: 0
; 0000 006B checkAlarm();
;PCODE: $000000C0 VOL: 0
; 0000 006C }
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;#define KEYPAD_PORT PORTD
;#define KEYPAD_DDR   DDRD
;#define KEYPAD_PIN   PIND
;char GetKeyPressed()
; 0000 0071 {
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 0072     char r,c;
; 0000 0073 
; 0000 0074    KEYPAD_PORT|= 0X0F;
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;	r -> R17
;	c -> R16
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 0075 
; 0000 0076    for(c=0;c<3;c++)
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 0077    {
; 0000 0078       KEYPAD_DDR&=~(0X7F);
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0000 0079 
; 0000 007A       KEYPAD_DDR|=(0X40>>c);
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0000 007B       for(r=0;r<4;r++)
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0000 007C       {
; 0000 007D          if(!(KEYPAD_PIN & (0X08>>r)))
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
; 0000 007E          {
; 0000 007F             return (r*3+c);
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0000 0080          }
; 0000 0081       }
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 0082    }
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 0000 0083 
; 0000 0084    return 0XFF;//Indicate No key pressed
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0000 0085 }
;PCODE: $00000101 VOL: 0
;
;void main(void)
; 0000 0088 {
;PCODE: $00000102 VOL: 0
; 0000 0089 char key;
; 0000 008A // Declare your local variables here
; 0000 008B 
; 0000 008C // Input/Output Ports initialization
; 0000 008D // Port A initialization
; 0000 008E // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 008F DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;	key -> R17
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0000 0090 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0091 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 0092 
; 0000 0093 // Port B initialization
; 0000 0094 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0095 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0000 0096 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0097 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0000 0098 
; 0000 0099 // Port C initialization
; 0000 009A // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=Out
; 0000 009B DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (1<<DDC0);
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
; 0000 009C // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 009D PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
; 0000 009E 
; 0000 009F // Port D initialization
; 0000 00A0 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 00A1 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
; 0000 00A2 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 00A3 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
; 0000 00A4 
; 0000 00A5 // Timer/Counter 0 initialization
; 0000 00A6 // Clock source: System Clock
; 0000 00A7 // Clock value: Timer 0 Stopped
; 0000 00A8 // Mode: Normal top=0xFF
; 0000 00A9 // OC0 output: Disconnected
; 0000 00AA TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0000 00AB TCNT0=0x00;
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
; 0000 00AC OCR0=0x00;
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
; 0000 00AD 
; 0000 00AE // Timer/Counter 1 initialization
; 0000 00AF // Clock source: System Clock
; 0000 00B0 // Clock value: 31.250 kHz
; 0000 00B1 // Mode: Normal top=0xFFFF
; 0000 00B2 // OC1A output: Disconnected
; 0000 00B3 // OC1B output: Disconnected
; 0000 00B4 // Noise Canceler: Off
; 0000 00B5 // Input Capture on Falling Edge
; 0000 00B6 // Timer Period: 1 s
; 0000 00B7 // Timer1 Overflow Interrupt: On
; 0000 00B8 // Input Capture Interrupt: Off
; 0000 00B9 // Compare A Match Interrupt: Off
; 0000 00BA // Compare B Match Interrupt: Off
; 0000 00BB TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0000 00BC TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (1<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
; 0000 00BD TCNT1H=0x85;
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
; 0000 00BE TCNT1L=0xEE;
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
; 0000 00BF ICR1H=0x00;
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
; 0000 00C0 ICR1L=0x00;
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
; 0000 00C1 OCR1AH=0x00;
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
; 0000 00C2 OCR1AL=0x00;
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0000 00C3 OCR1BH=0x00;
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
; 0000 00C4 OCR1BL=0x00;
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
; 0000 00C5 
; 0000 00C6 // Timer/Counter 2 initialization
; 0000 00C7 // Clock source: System Clock
; 0000 00C8 // Clock value: Timer2 Stopped
; 0000 00C9 // Mode: Normal top=0xFF
; 0000 00CA // OC2 output: Disconnected
; 0000 00CB ASSR=0<<AS2;
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
; 0000 00CC TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
; 0000 00CD TCNT2=0x00;
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
; 0000 00CE OCR2=0x00;
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
; 0000 00CF 
; 0000 00D0 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 00D1 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (1<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
; 0000 00D2 
; 0000 00D3 // External Interrupt(s) initialization
; 0000 00D4 // INT0: Off
; 0000 00D5 // INT1: Off
; 0000 00D6 // INT2: Off
; 0000 00D7 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0000 00D8 MCUCSR=(0<<ISC2);
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
; 0000 00D9 
; 0000 00DA // USART initialization
; 0000 00DB // USART disabled
; 0000 00DC UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
; 0000 00DD 
; 0000 00DE // Analog Comparator initialization
; 0000 00DF // Analog Comparator: Off
; 0000 00E0 // The Analog Comparator's positive input is
; 0000 00E1 // connected to the AIN0 pin
; 0000 00E2 // The Analog Comparator's negative input is
; 0000 00E3 // connected to the AIN1 pin
; 0000 00E4 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
; 0000 00E5 SFIOR=(0<<ACME);
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
; 0000 00E6 
; 0000 00E7 // ADC initialization
; 0000 00E8 // ADC disabled
; 0000 00E9 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
; 0000 00EA 
; 0000 00EB // SPI initialization
; 0000 00EC // SPI disabled
; 0000 00ED SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
; 0000 00EE 
; 0000 00EF // TWI initialization
; 0000 00F0 // TWI disabled
; 0000 00F1 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
; 0000 00F2 
; 0000 00F3 // Alphanumeric LCD initialization
; 0000 00F4 // Connections are specified in the
; 0000 00F5 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 00F6 // RS - PORTA Bit 0
; 0000 00F7 // RD - PORTA Bit 1
; 0000 00F8 // EN - PORTA Bit 2
; 0000 00F9 // D4 - PORTA Bit 4
; 0000 00FA // D5 - PORTA Bit 5
; 0000 00FB // D6 - PORTA Bit 6
; 0000 00FC // D7 - PORTA Bit 7
; 0000 00FD // Characters/line: 8
; 0000 00FE lcd_init(16);
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
; 0000 00FF // Global enable interrupts
; 0000 0100     #asm("sei")
;PCODE: $00000149 VOL: 0
	sei
;PCODE: $0000014A VOL: 0
; 0000 0101     while (1){
;PCODE: $0000014B VOL: 0
; 0000 0102         if(alarmSetting)
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
; 0000 0103             showAlarmSetting();
;PCODE: $0000014F VOL: 0
; 0000 0104         do{
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
; 0000 0105              key = GetKeyPressed();
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
; 0000 0106             delay_ms(50);
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
; 0000 0107         } while(key!=0xFF);
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
; 0000 0108         do{
;PCODE: $0000015D VOL: 0
; 0000 0109              key = GetKeyPressed();
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
; 0000 010A             delay_ms(50);
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
; 0000 010B         } while(key==0xFF);
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
; 0000 010C         delay_ms(50);
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
; 0000 010D         if(key==0XFF)
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
; 0000 010E             continue;
;PCODE: $0000016F VOL: 0
; 0000 010F         if(key==11)
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
; 0000 0110             alarming=false;
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
; 0000 0111         if(key==9)
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
; 0000 0112             if(!alarmSetting){
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
; 0000 0113                 alarmSetting=true;
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
; 0000 0114                 inputCounter=0;
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
; 0000 0115             }
; 0000 0116             else
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
; 0000 0117                 alarmSetting=false;
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
; 0000 0118         if(!alarmSetting)
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
; 0000 0119             continue;
;PCODE: $0000018A VOL: 0
; 0000 011A         if(key==10)
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
; 0000 011B             key=0;
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
; 0000 011C         else
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
; 0000 011D             key++;
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
; 0000 011E         if(key>=10)
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
; 0000 011F             continue;
;PCODE: $00000199 VOL: 0
; 0000 0120         if(inputCounter==0){
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
; 0000 0121             if(key>2)
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
; 0000 0122                 continue;
;PCODE: $000001A1 VOL: 0
; 0000 0123             alarmHour=key*10;
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
; 0000 0124         }
; 0000 0125         if(inputCounter==1){
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
; 0000 0126             if(alarmHour==20 && key>3)
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
; 0000 0127                 continue;
;PCODE: $000001B4 VOL: 0
; 0000 0128             alarmHour+=key;
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
; 0000 0129         }
; 0000 012A         if(inputCounter==2){
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
; 0000 012B             if(key>5)
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
; 0000 012C                 continue;
;PCODE: $000001BF VOL: 0
; 0000 012D             alarmMinute=key*10;
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
; 0000 012E         }
; 0000 012F         if(inputCounter==3)
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
; 0000 0130             alarmMinute+=key;
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
; 0000 0131 
; 0000 0132         if(inputCounter==4){
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
; 0000 0133             if(key>5)
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
; 0000 0134                 continue;
;PCODE: $000001D1 VOL: 0
; 0000 0135             alarmSecond=key*10;
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
; 0000 0136         }
; 0000 0137         if(inputCounter==5){
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
; 0000 0138             alarmSecond+=key;
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
; 0000 0139             alarmSetting=false;
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
; 0000 013A         }
; 0000 013B         inputCounter++;
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
; 0000 013C     }
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
; 0000 013D }
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
